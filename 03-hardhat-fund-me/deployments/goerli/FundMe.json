{
  "address": "0xf407376897171489caE03b0F0d265fA9a338aE4C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1a6ec98961de0859ee1fac39f3fb5acfddd48ff388c5a2daf80c0fc0d958b809",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0xf407376897171489caE03b0F0d265fA9a338aE4C",
    "transactionIndex": 25,
    "gasUsed": "870352",
    "logsBloom": "0x
    "blockHash": "0xef62c8055e18a390917f540fcc6bda64fc25b0bb11bf844261bd2f18964d6240",
    "transactionHash": "0x1a6ec98961de0859ee1fac39f3fb5acfddd48ff388c5a2daf80c0fc0d958b809",
    "logs": [],
    "blockNumber": 7651999,
    "cumulativeGasUsed": "8362877",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "6ac17ccae3bdb5bfa2df94e2f386d2f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// This is not inside the contract, so it won't take a storage slot\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public number;\\n    // \\\"constant\\\" keyword allows it to not take a storage spot + easier to read\\n    // constants are declared LIKE_THIS\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    // owner is set only once, but declared in a different line\\n    // So not a \\\"constant\\\" but a \\\"immutable\\\"\\n    // That can be called i_likeThis\\n    address public immutable i_owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    // The constructor function gets called in the same tx as the contract creation\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // We need to make the function payable so it can hold Eth\\n    function fund() public payable {\\n        // If the minimum fund amount is not met, then the tx is reverted\\n        // So number is not set to 5\\n        // BUT gas is spent for anything BEFORE the require\\n        // BUT the gas spent AFTER require, if not met, will be returned\\n        number = 5;\\n        // Set a minimum fund amount\\n        // This function requires the value (msg.value) to be > 1 Eth\\n        // require(getConversionRate(msg.value) >= minimumUsd, \\\"Didn't send enough Eth!\\\");\\n        // BUT now with the library ->\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough Eth!\\\"\\n        );\\n        // msg.value is considered as the parameter for getConversionRate\\n\\n        // Add the funder to the list if it went through\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    // Before calling the function, do what is in \\\"onlyOwner\\\", THEN call the rest of the code\\n    function withdraw() public onlyOwner {\\n        // Loop through the funders array and reset it\\n        // for (start index; end index; stem)\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        // Reset the array\\n        funders = new address[](0);\\n\\n        // Withdraw the funds\\n        // msg.sender is of type address\\n        // payable(msg.sender) is of type payable address\\n        // Using TRANSFER : if it exceeds 2300 gas, it fails (reverted)\\n        // msg.sender.transfer(address(this).balance)\\n        // Using SEND (if it fails, it will return a bool false)\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // Using CALL (no gas limit)\\n        // If it returns a function, or some value, it will be saved in the variables on the left\\n        // GENERALY RECOMMANDED\\n        (\\n            bool callSuccess, /* bytes memory dataReturned */\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // Can use a modifier to modify any function\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        // More gas efficient\\n        if (msg.sender != i_owner) {\\n            revert NotOwner();\\n        }\\n        // Do what is under the \\\"_\\\" BEFORE the function that has \\\"onlyOwner\\\" in the declaration\\n        _;\\n        // Do what is under the \\\"_\\\" AFTER the function that has \\\"onlyOwner\\\" in the declaration\\n    }\\n\\n    // What happens if someone sends this contract Eth without calling the \\\"fund\\\" function ?\\n    // We can use some special functions -> receive() or fallback()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x19a821b094583258c6b1de89a7a624ea1cb4aa559956843616f9870fa7494262\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// A library can't have any state variable / send Eth\\nlibrary PriceConverter {\\n    // We need these functions to be internal\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // We get it with 8 decimals & we get it from int to uint256\\n        return uint256(price * 1e10);\\n    }\\n\\n    // Pass a Eth amount, and know how much it's worth in USD\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x658f03af3730dd1939574d727934343a6738a3f738214880e8c236c6c72ede0d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610fc2380380610fc283398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e5d6101656000396000818161031201526105a40152610e5d6000f3fe60806040526004361061007f5760003560e01c80638381f58a1161004e5780638381f58a14610142578063b60d42881461016d578063dba6335f14610177578063dc0d3dff146101a25761008e565b80633ccfd60b146100985780633e47d6f3146100af5780636b69a592146100ec578063741bef1a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100ad610310565b005b3480156100bb57600080fd5b506100d660048036038101906100d191906107eb565b610551565b6040516100e39190610831565b60405180910390f35b3480156100f857600080fd5b50610101610569565b60405161010e9190610831565b60405180910390f35b34801561012357600080fd5b5061012c610576565b60405161013991906108ab565b60405180910390f35b34801561014e57600080fd5b5061015761059c565b6040516101649190610831565b60405180910390f35b6101756101df565b005b34801561018357600080fd5b5061018c6105a2565b60405161019991906108d5565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c4919061091c565b6105c6565b6040516101d691906108d5565b60405180910390f35b60056000819055506802b5e3af16b1880000610226600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461060590919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109a6565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610395576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610441576000600182815481106103bb576103ba6109c6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061043990610a24565b915050610398565b50600067ffffffffffffffff81111561045d5761045c610a6d565b5b60405190808252806020026020018201604052801561048b5781602001602082028036833780820191505090505b50600190805190602001906104a19291906106e1565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104c890610acd565b60006040518083038185875af1925050503d8060008114610505576040519150601f19603f3d011682016040523d82523d6000602084013e61050a565b606091505b505090508061054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590610b2e565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105d657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061061183610641565b90506000670de0b6b3a7640000858361062a9190610b4e565b6106349190610bd7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561068a57600080fd5b505afa15801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190610c95565b5050509150506402540be400816106d99190610d10565b915050919050565b82805482825590600052602060002090810192821561075a579160200282015b828111156107595782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610701565b5b509050610767919061076b565b5090565b5b8082111561078457600081600090555060010161076c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b88261078d565b9050919050565b6107c8816107ad565b81146107d357600080fd5b50565b6000813590506107e5816107bf565b92915050565b60006020828403121561080157610800610788565b5b600061080f848285016107d6565b91505092915050565b6000819050919050565b61082b81610818565b82525050565b60006020820190506108466000830184610822565b92915050565b6000819050919050565b600061087161086c6108678461078d565b61084c565b61078d565b9050919050565b600061088382610856565b9050919050565b600061089582610878565b9050919050565b6108a58161088a565b82525050565b60006020820190506108c0600083018461089c565b92915050565b6108cf816107ad565b82525050565b60006020820190506108ea60008301846108c6565b92915050565b6108f981610818565b811461090457600080fd5b50565b600081359050610916816108f0565b92915050565b60006020828403121561093257610931610788565b5b600061094084828501610907565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045746821000000000000000000600082015250565b6000610990601783610949565b915061099b8261095a565b602082019050919050565b600060208201905081810360008301526109bf81610983565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a2f82610818565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a6257610a616109f5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ab7600083610a9c565b9150610ac282610aa7565b600082019050919050565b6000610ad882610aaa565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b18600b83610949565b9150610b2382610ae2565b602082019050919050565b60006020820190508181036000830152610b4781610b0b565b9050919050565b6000610b5982610818565b9150610b6483610818565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b9d57610b9c6109f5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610be282610818565b9150610bed83610818565b925082610bfd57610bfc610ba8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c2781610c08565b8114610c3257600080fd5b50565b600081519050610c4481610c1e565b92915050565b6000819050919050565b610c5d81610c4a565b8114610c6857600080fd5b50565b600081519050610c7a81610c54565b92915050565b600081519050610c8f816108f0565b92915050565b600080600080600060a08688031215610cb157610cb0610788565b5b6000610cbf88828901610c35565b9550506020610cd088828901610c6b565b9450506040610ce188828901610c80565b9350506060610cf288828901610c80565b9250506080610d0388828901610c35565b9150509295509295909350565b6000610d1b82610c4a565b9150610d2683610c4a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6557610d646109f5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610da257610da16109f5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ddf57610dde6109f5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e1c57610e1b6109f5565b5b82820290509291505056fea26469706673582212207e07ae5de758ef65edc3e79a4955f42c711acb931c79796d45aebbb82050e8b764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638381f58a1161004e5780638381f58a14610142578063b60d42881461016d578063dba6335f14610177578063dc0d3dff146101a25761008e565b80633ccfd60b146100985780633e47d6f3146100af5780636b69a592146100ec578063741bef1a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100ad610310565b005b3480156100bb57600080fd5b506100d660048036038101906100d191906107eb565b610551565b6040516100e39190610831565b60405180910390f35b3480156100f857600080fd5b50610101610569565b60405161010e9190610831565b60405180910390f35b34801561012357600080fd5b5061012c610576565b60405161013991906108ab565b60405180910390f35b34801561014e57600080fd5b5061015761059c565b6040516101649190610831565b60405180910390f35b6101756101df565b005b34801561018357600080fd5b5061018c6105a2565b60405161019991906108d5565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c4919061091c565b6105c6565b6040516101d691906108d5565b60405180910390f35b60056000819055506802b5e3af16b1880000610226600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461060590919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109a6565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610395576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610441576000600182815481106103bb576103ba6109c6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061043990610a24565b915050610398565b50600067ffffffffffffffff81111561045d5761045c610a6d565b5b60405190808252806020026020018201604052801561048b5781602001602082028036833780820191505090505b50600190805190602001906104a19291906106e1565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104c890610acd565b60006040518083038185875af1925050503d8060008114610505576040519150601f19603f3d011682016040523d82523d6000602084013e61050a565b606091505b505090508061054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590610b2e565b60405180910390fd5b50565b60026020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105d657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061061183610641565b90506000670de0b6b3a7640000858361062a9190610b4e565b6106349190610bd7565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561068a57600080fd5b505afa15801561069e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c29190610c95565b5050509150506402540be400816106d99190610d10565b915050919050565b82805482825590600052602060002090810192821561075a579160200282015b828111156107595782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610701565b5b509050610767919061076b565b5090565b5b8082111561078457600081600090555060010161076c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b88261078d565b9050919050565b6107c8816107ad565b81146107d357600080fd5b50565b6000813590506107e5816107bf565b92915050565b60006020828403121561080157610800610788565b5b600061080f848285016107d6565b91505092915050565b6000819050919050565b61082b81610818565b82525050565b60006020820190506108466000830184610822565b92915050565b6000819050919050565b600061087161086c6108678461078d565b61084c565b61078d565b9050919050565b600061088382610856565b9050919050565b600061089582610878565b9050919050565b6108a58161088a565b82525050565b60006020820190506108c0600083018461089c565b92915050565b6108cf816107ad565b82525050565b60006020820190506108ea60008301846108c6565b92915050565b6108f981610818565b811461090457600080fd5b50565b600081359050610916816108f0565b92915050565b60006020828403121561093257610931610788565b5b600061094084828501610907565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045746821000000000000000000600082015250565b6000610990601783610949565b915061099b8261095a565b602082019050919050565b600060208201905081810360008301526109bf81610983565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a2f82610818565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a6257610a616109f5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ab7600083610a9c565b9150610ac282610aa7565b600082019050919050565b6000610ad882610aaa565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b18600b83610949565b9150610b2382610ae2565b602082019050919050565b60006020820190508181036000830152610b4781610b0b565b9050919050565b6000610b5982610818565b9150610b6483610818565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b9d57610b9c6109f5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610be282610818565b9150610bed83610818565b925082610bfd57610bfc610ba8565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c2781610c08565b8114610c3257600080fd5b50565b600081519050610c4481610c1e565b92915050565b6000819050919050565b610c5d81610c4a565b8114610c6857600080fd5b50565b600081519050610c7a81610c54565b92915050565b600081519050610c8f816108f0565b92915050565b600080600080600060a08688031215610cb157610cb0610788565b5b6000610cbf88828901610c35565b9550506020610cd088828901610c6b565b9450506040610ce188828901610c80565b9350506060610cf288828901610c80565b9250506080610d0388828901610c35565b9150509295509295909350565b6000610d1b82610c4a565b9150610d2683610c4a565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6557610d646109f5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610da257610da16109f5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610ddf57610dde6109f5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e1c57610e1b6109f5565b5b82820290509291505056fea26469706673582212207e07ae5de758ef65edc3e79a4955f42c711acb931c79796d45aebbb82050e8b764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "number",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}