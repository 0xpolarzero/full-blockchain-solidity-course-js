{
  "address": "0xEA9A6d373d4f1cA9E65c4394A0d49427C28b674d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x30cf4404ca6e8fa97b0f774560aa40414b00be1e961863cecc6fec5f4d987c63",
  "receipt": {
    "to": null,
    "from": "0xc06d127E504a944f63Bc750D8F512556c576F3EF",
    "contractAddress": "0xEA9A6d373d4f1cA9E65c4394A0d49427C28b674d",
    "transactionIndex": 22,
    "gasUsed": "1017237",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5131530b8642e7f7fed1f11066372ddb329aec060f49bf4d7907a5fdd67caf67",
    "transactionHash": "0x30cf4404ca6e8fa97b0f774560aa40414b00be1e961863cecc6fec5f4d987c63",
    "logs": [],
    "blockNumber": 7653633,
    "cumulativeGasUsed": "3313184",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "c5315c2d118be17b105c9f78b2f4fcb7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"polarzero\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Just a basic Fund Me contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// This is not inside the contract, so it won't take a storage slot\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title FundMe\\n * @author polarzero\\n * @notice Just a basic Fund Me contract\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // \\\"constant\\\" keyword allows it to not take a storage spot + easier to read\\n    // constants are declared LIKE_THIS\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    // owner is set only once, but declared in a different line\\n    // So not a \\\"constant\\\" but a \\\"immutable\\\"\\n    // That can be called i_likeThis\\n    address private immutable i_owner;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Can use a modifier to modify any function\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        // More gas efficient\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        // Do what is under the \\\"_\\\" BEFORE the function that has \\\"onlyOwner\\\" in the declaration\\n        _;\\n        // Do what is under the \\\"_\\\" AFTER the function that has \\\"onlyOwner\\\" in the declaration\\n    }\\n\\n    // The constructor function gets called in the same tx as the contract creation\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // What happens if someone sends this contract Eth without calling the \\\"fund\\\" function ?\\n    // We can use some special functions -> receive() or fallback()\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // We need to make the function payable so it can hold Eth\\n    function fund() public payable {\\n        // If the minimum fund amount is not met, then the tx is reverted\\n        // So number is not set to 5\\n        // BUT gas is spent for anything BEFORE the require\\n        // BUT the gas spent AFTER require, if not met, will be returned\\n        // s_number = 5;\\n        // Set a minimum fund amount\\n        // This function requires the value (msg.value) to be > 1 Eth\\n        // require(getConversionRate(msg.value) >= minimumUsd, \\\"Didn't send enough Eth!\\\");\\n        // BUT now with the library ->\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough Eth!\\\"\\n        );\\n        // msg.value is considered as the parameter for getConversionRate\\n\\n        // Add the funder to the list if it went through\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    // Before calling the function, do what is in \\\"onlyOwner\\\", THEN call the rest of the code\\n    function withdraw() public onlyOwner {\\n        // Loop through the funders array and reset it\\n        // for (start index; end index; stem)\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // Reset the array\\n        s_funders = new address[](0);\\n\\n        // Withdraw the funds\\n        // msg.sender is of type address\\n        // payable(msg.sender) is of type payable address\\n        // Using TRANSFER : if it exceeds 2300 gas, it fails (reverted)\\n        // msg.sender.transfer(address(this).balance)\\n        // Using SEND (if it fails, it will return a bool false)\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // Using CALL (no gas limit)\\n        // If it returns a function, or some value, it will be saved in the variables on the left\\n        // GENERALY RECOMMANDED\\n        (\\n            bool callSuccess, /* bytes memory dataReturned */\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // We need to minimize access/reading from storage to optimize gas\\n    function cheaperWithdraw() public onlyOwner {\\n        // We store the array in memory to avoid highly expensive storage reads\\n        // We can't put a mapping in memory\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xa32ee8bdfdb2504f8f51fa90be7583c6e0eea2b289ddb09c018e77d2d43ffbe0\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// A library can't have any state variable / send Eth\\nlibrary PriceConverter {\\n    // We need these functions to be internal\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // We get it with 8 decimals & we get it from int to uint256\\n        return uint256(price * 1e10);\\n    }\\n\\n    // Pass a Eth amount, and know how much it's worth in USD\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x658f03af3730dd1939574d727934343a6738a3f738214880e8c236c6c72ede0d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200128f3803806200128f833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611109620001866000396000818161033f0152818161058e015281816105de01526107d401526111096000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a97565b6102f4565b6040516100cc9190610add565b60405180910390f35b3480156100e157600080fd5b506100ea61033d565b005b3480156100f857600080fd5b5061010161057d565b60405161010e9190610add565b60405180910390f35b34801561012357600080fd5b5061012c61058a565b6040516101399190610b07565b60405180910390f35b34801561014e57600080fd5b506101576105b2565b6040516101649190610b81565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105dc565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bc8565b61086a565b6040516101c29190610b07565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b190919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c52565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561046d5760008082815481106103e7576103e6610c72565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046590610cd0565b9150506103c5565b50600067ffffffffffffffff81111561048957610488610d19565b5b6040519080825280602002602001820160405280156104b75781602001602082028036833780820191505090505b50600090805190602001906104cd92919061098d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f490610d79565b60006040518083038185875af1925050503d8060008114610531576040519150601f19603f3d011682016040523d82523d6000602084013e610536565b606091505b505090508061057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610dda565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610661576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069a575b5050505050905060005b815181101561076f57600082828151811061070c5761070b610c72565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076790610cd0565b9150506106ee565b50600067ffffffffffffffff81111561078b5761078a610d19565b5b6040519080825280602002602001820160405280156107b95781602001602082028036833780820191505090505b50600090805190602001906107cf92919061098d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081690610d79565b60006040518083038185875af1925050503d8060008114610853576040519150601f19603f3d011682016040523d82523d6000602084013e610858565b606091505b505090508061086657600080fd5b5050565b600080828154811061087f5761087e610c72565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108bd836108ed565b90506000670de0b6b3a764000085836108d69190610dfa565b6108e09190610e83565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190610f41565b5050509150506402540be400816109859190610fbc565b915050919050565b828054828255906000526020600020908101928215610a06579160200282015b82811115610a055782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ad565b5b509050610a139190610a17565b5090565b5b80821115610a30576000816000905550600101610a18565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6482610a39565b9050919050565b610a7481610a59565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600060208284031215610aad57610aac610a34565b5b6000610abb84828501610a82565b91505092915050565b6000819050919050565b610ad781610ac4565b82525050565b6000602082019050610af26000830184610ace565b92915050565b610b0181610a59565b82525050565b6000602082019050610b1c6000830184610af8565b92915050565b6000819050919050565b6000610b47610b42610b3d84610a39565b610b22565b610a39565b9050919050565b6000610b5982610b2c565b9050919050565b6000610b6b82610b4e565b9050919050565b610b7b81610b60565b82525050565b6000602082019050610b966000830184610b72565b92915050565b610ba581610ac4565b8114610bb057600080fd5b50565b600081359050610bc281610b9c565b92915050565b600060208284031215610bde57610bdd610a34565b5b6000610bec84828501610bb3565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045746821000000000000000000600082015250565b6000610c3c601783610bf5565b9150610c4782610c06565b602082019050919050565b60006020820190508181036000830152610c6b81610c2f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cdb82610ac4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0e57610d0d610ca1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d63600083610d48565b9150610d6e82610d53565b600082019050919050565b6000610d8482610d56565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dc4600b83610bf5565b9150610dcf82610d8e565b602082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b6000610e0582610ac4565b9150610e1083610ac4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4957610e48610ca1565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8e82610ac4565b9150610e9983610ac4565b925082610ea957610ea8610e54565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ed381610eb4565b8114610ede57600080fd5b50565b600081519050610ef081610eca565b92915050565b6000819050919050565b610f0981610ef6565b8114610f1457600080fd5b50565b600081519050610f2681610f00565b92915050565b600081519050610f3b81610b9c565b92915050565b600080600080600060a08688031215610f5d57610f5c610a34565b5b6000610f6b88828901610ee1565b9550506020610f7c88828901610f17565b9450506040610f8d88828901610f2c565b9350506060610f9e88828901610f2c565b9250506080610faf88828901610ee1565b9150509295509295909350565b6000610fc782610ef6565b9150610fd283610ef6565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101157611010610ca1565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561104e5761104d610ca1565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108b5761108a610ca1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110c8576110c7610ca1565b5b82820290509291505056fea26469706673582212205f1820c1204cf201d5f0c70a81401b788f4e2027ccf8257a0edf78b4fbf2b4ca64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a97565b6102f4565b6040516100cc9190610add565b60405180910390f35b3480156100e157600080fd5b506100ea61033d565b005b3480156100f857600080fd5b5061010161057d565b60405161010e9190610add565b60405180910390f35b34801561012357600080fd5b5061012c61058a565b6040516101399190610b07565b60405180910390f35b34801561014e57600080fd5b506101576105b2565b6040516101649190610b81565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105dc565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610bc8565b61086a565b6040516101c29190610b07565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b190919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c52565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561046d5760008082815481106103e7576103e6610c72565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046590610cd0565b9150506103c5565b50600067ffffffffffffffff81111561048957610488610d19565b5b6040519080825280602002602001820160405280156104b75781602001602082028036833780820191505090505b50600090805190602001906104cd92919061098d565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f490610d79565b60006040518083038185875af1925050503d8060008114610531576040519150601f19603f3d011682016040523d82523d6000602084013e610536565b606091505b505090508061057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057190610dda565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610661576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106e457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069a575b5050505050905060005b815181101561076f57600082828151811061070c5761070b610c72565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076790610cd0565b9150506106ee565b50600067ffffffffffffffff81111561078b5761078a610d19565b5b6040519080825280602002602001820160405280156107b95781602001602082028036833780820191505090505b50600090805190602001906107cf92919061098d565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081690610d79565b60006040518083038185875af1925050503d8060008114610853576040519150601f19603f3d011682016040523d82523d6000602084013e610858565b606091505b505090508061086657600080fd5b5050565b600080828154811061087f5761087e610c72565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108bd836108ed565b90506000670de0b6b3a764000085836108d69190610dfa565b6108e09190610e83565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190610f41565b5050509150506402540be400816109859190610fbc565b915050919050565b828054828255906000526020600020908101928215610a06579160200282015b82811115610a055782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ad565b5b509050610a139190610a17565b5090565b5b80821115610a30576000816000905550600101610a18565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6482610a39565b9050919050565b610a7481610a59565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b600060208284031215610aad57610aac610a34565b5b6000610abb84828501610a82565b91505092915050565b6000819050919050565b610ad781610ac4565b82525050565b6000602082019050610af26000830184610ace565b92915050565b610b0181610a59565b82525050565b6000602082019050610b1c6000830184610af8565b92915050565b6000819050919050565b6000610b47610b42610b3d84610a39565b610b22565b610a39565b9050919050565b6000610b5982610b2c565b9050919050565b6000610b6b82610b4e565b9050919050565b610b7b81610b60565b82525050565b6000602082019050610b966000830184610b72565b92915050565b610ba581610ac4565b8114610bb057600080fd5b50565b600081359050610bc281610b9c565b92915050565b600060208284031215610bde57610bdd610a34565b5b6000610bec84828501610bb3565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045746821000000000000000000600082015250565b6000610c3c601783610bf5565b9150610c4782610c06565b602082019050919050565b60006020820190508181036000830152610c6b81610c2f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cdb82610ac4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0e57610d0d610ca1565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d63600083610d48565b9150610d6e82610d53565b600082019050919050565b6000610d8482610d56565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dc4600b83610bf5565b9150610dcf82610d8e565b602082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b6000610e0582610ac4565b9150610e1083610ac4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4957610e48610ca1565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8e82610ac4565b9150610e9983610ac4565b925082610ea957610ea8610e54565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ed381610eb4565b8114610ede57600080fd5b50565b600081519050610ef081610eca565b92915050565b6000819050919050565b610f0981610ef6565b8114610f1457600080fd5b50565b600081519050610f2681610f00565b92915050565b600081519050610f3b81610b9c565b92915050565b600080600080600060a08688031215610f5d57610f5c610a34565b5b6000610f6b88828901610ee1565b9550506020610f7c88828901610f17565b9450506040610f8d88828901610f2c565b9350506060610f9e88828901610f2c565b9250506080610faf88828901610ee1565b9150509295509295909350565b6000610fc782610ef6565b9150610fd283610ef6565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101157611010610ca1565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561104e5761104d610ca1565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108b5761108a610ca1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110c8576110c7610ca1565b5b82820290509291505056fea26469706673582212205f1820c1204cf201d5f0c70a81401b788f4e2027ccf8257a0edf78b4fbf2b4ca64736f6c63430008080033",
  "devdoc": {
    "author": "polarzero",
    "kind": "dev",
    "methods": {},
    "title": "FundMe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Just a basic Fund Me contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}