{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"./PriceConverter.sol\";\n\n// This is not inside the contract, so it won't take a storage slot\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public number;\n    // \"constant\" keyword allows it to not take a storage spot + easier to read\n    // constants are declared LIKE_THIS\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    // owner is set only once, but declared in a different line\n    // So not a \"constant\" but a \"immutable\"\n    // That can be called i_likeThis\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    // The constructor function gets called in the same tx as the contract creation\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // We need to make the function payable so it can hold Eth\n    function fund() public payable {\n        // If the minimum fund amount is not met, then the tx is reverted\n        // So number is not set to 5\n        // BUT gas is spent for anything BEFORE the require\n        // BUT the gas spent AFTER require, if not met, will be returned\n        number = 5;\n        // Set a minimum fund amount\n        // This function requires the value (msg.value) to be > 1 Eth\n        // require(getConversionRate(msg.value) >= minimumUsd, \"Didn't send enough Eth!\");\n        // BUT now with the library ->\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"Didn't send enough Eth!\"\n        );\n        // msg.value is considered as the parameter for getConversionRate\n\n        // Add the funder to the list if it went through\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    // Before calling the function, do what is in \"onlyOwner\", THEN call the rest of the code\n    function withdraw() public onlyOwner {\n        // Loop through the funders array and reset it\n        // for (start index; end index; stem)\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        // Reset the array\n        funders = new address[](0);\n\n        // Withdraw the funds\n        // msg.sender is of type address\n        // payable(msg.sender) is of type payable address\n        // Using TRANSFER : if it exceeds 2300 gas, it fails (reverted)\n        // msg.sender.transfer(address(this).balance)\n        // Using SEND (if it fails, it will return a bool false)\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n        // Using CALL (no gas limit)\n        // If it returns a function, or some value, it will be saved in the variables on the left\n        // GENERALY RECOMMANDED\n        (\n            bool callSuccess, /* bytes memory dataReturned */\n\n        ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    // Can use a modifier to modify any function\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\n        // More gas efficient\n        if (msg.sender != i_owner) {\n            revert NotOwner();\n        }\n        // Do what is under the \"_\" BEFORE the function that has \"onlyOwner\" in the declaration\n        _;\n        // Do what is under the \"_\" AFTER the function that has \"onlyOwner\" in the declaration\n    }\n\n    // What happens if someone sends this contract Eth without calling the \"fund\" function ?\n    // We can use some special functions -> receive() or fallback()\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// A library can't have any state variable / send Eth\nlibrary PriceConverter {\n    // We need these functions to be internal\n    function getPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // We get it with 8 decimals & we get it from int to uint256\n        return uint256(price * 1e10);\n    }\n\n    // Pass a Eth amount, and know how much it's worth in USD\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}